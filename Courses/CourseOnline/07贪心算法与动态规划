贪心算法与动态规划
	看似简单：
		第二步，第三步。。每一步都选择最好的方案
		选择是单一的（排除相等的情况）
	并不简单：
		证明有效
			严格的数学证明
		证明无效
			找到一个反例
	算法框架
		全集s
		逸轩则对象t（部分姐）
		isValid(T)
			空合法
			如果一个集合合法，全部子集也合法
		评价函数paryoff(T)，衡量T的收益
		目标：从S中选出自己T，使得isValid（t）为true，并且paroff(T)最大
		算法：
			从空寂开始每次加一个元素，短视
			打您加入一个元素--“最好”的元素--担心选择性质
	理解贪心算法--dijkstra
		求A到C的最短路
			每次选最短的边，直到重点
				AB+BC=5//错误
			Dijkstra的贪心
				d[A]=0
				选取d最小节点，并更新d
			贪心策略是有条件的
		一般不能说-贪心算法是错的
		只能说--这样的贪心不对题
		可以用贪心算法的题目不多
			关键在于证明
		经典贪心算法
			dijkstra
			pri
			kruskal
			huffman
	理论总结
		是一类算法--不是一个算法
		使用范围小
		实现简单
		证明复杂
		获得难问题的近似解
		面试、鄙视不会出现太难的题目
			因为证明困难
			证伪也相当困难
	例1
		用1，2，5分的硬币，凑出n，使得所用的硬币最少
		1，2，5，7是不可以贪心的
	例2
		有若干个活动，第i个活动开始的时间是[Si,Fi),只有一个教室，时间不能相交，求最多安排多少个活动
			按结束时间排序
			其他策略的反例
				最早开始时间
				最短任务
				最少冲突
	例3
		要安排所有的活动，需要几个教室
			一个一个的分配
				反例A:1 2,B:1 4,C:5 6,D:3 7
			变换策略：
				按照开始时间，对活动排序。贪心分配，尽量安排在一个没有冲突的教室
			简单证明：
	例4
		有若干物品，每个物品都有自己的体积和价值，每个物品可以拿任意比例部分，价值也按拿的比例获得。如何获得物品总价值最大
			按照性价比排序
			如果物体不可分，使用动态规划
	例5
		给出n个去见，求最大重叠区间
			每条线短i考虑它后面和它相交的线短j
				如果j的右端点比i右端点更靠右
				如果j的右端点比i的右端点更靠左
					j的右端点没有用
	例6
		n个人，已知每个人的题中。每个人的城中不超过独木舟的总承重
		，最多坐两个人
			排序，看最重，最轻
				证明中证明贪心算法的到的结果比最优解优，就能证明
	例7
		给定一个大数，可以删掉m个数字，使得删完之后，剩余数最小
			删掉所有的逆序的首位
			使用链表0n
	例8
		若干个程序，每个计算需要R[i]个资源，存储需要O[i]个资源，O[i]<R[i].问如何执行，使得总资源最少
			没听懂
贪心总结
	很容易想到
	男证明
		数学归纳
		交换，将最优解逐个换成贪心里的解
	矩阵胚拟阵理论
		使用贪心算法的充分但非必要条件
	看短视频

动态规划
	简介
		1956年Bellman的著作dynamic programing
		著名的最短路径孙阿发--bellman-ford算法
	定义
		阶段
		状态
		决策
		无后效性
			之前状态改变，不影响后面结果的计算
	理解
		一个系统有若干状态，每个状态有若干合法操作
		决策会带来收益
		求，最重状态下最大的收益
		每个阶段选择一个决策
		初始状态下，求最重状态下最大收益
		每个阶段，选择一些决策
		收益只取决于当前状态和决策--不是马尔科夫
		使得系统达到种植状态时，总利益最大
	特点：子问题有大量重叠
		应对：打表避免重复计算
			表格记录每个状态的最大收益
	步骤
		确定状态集合和收益
		初始状态，中止状态
		确定决策集合
		是否无后效性
	例1
		最长单增资子序列
			确定收益：以第i项结尾的长度f[i]
			初始状态：f(0)=0
			种植状态max{f[1],f[2],f(3)...f(n)};
			决策状态:一直全部f(x),x<i,如果a,>ax,显然可以吧ai链接在ax后面
			收益表示，f(i)=max[f(x)|x<i且ai>ax]+1
		时间复杂度
			状态数*每种状态的转换数
		空间复杂度
			f(i) O(n)
	例2
		m行n列的二维数组，每个元素是一个非附属，右下，和最小
		dp
			dp[i][j]表示从坐上到达[i][j]的最小值
			dp[i][j]=min(dp[i-1][j],dp[i][j-1])+a[i][j]
			初值
				dp[0][0]=a[0][0]
				dp[0][j>0]=dp[0][j-1]+a[0][j];
				dp[i>0][0]=dp[i-1][0]+a[i][0];
			复杂度：时间O(m*n),空间O(m*n)
		空间优化
			dp[j]=min(d[j-1],dp[j])+a[i][j];
		贪心的反例
			0 1 100
			2 100 100
			1 1 1
	例3
		编辑距离
			dp[i][j]表示s的前i个位置和
	例3.2
		战炸弹问题
	例5
		dp[i][j]表示前i件物品，是否达到重量j
		dp[i][j]=
			ap[i-1][j]不选取第i个东西
			dp[i][j]=min{dp[i-1][j-v[i]],dp[i-1][j]};
	例6
		矩阵连乘，如何使矩阵结合使乘法计算次数最少
	例7
		多边形切成三角形，每切一个三角形都有一个代价，求最小代价
	例8
		只有
	例9
		有n个点，从最左边出发，访问到最右边回来，路径不能相交，并且选取路径最短
	例10
		n个城市，任意两个城市之间有一定距离。从一个城市出发经历所有的城市距离，最重回到起点，使得所有的距离最短
			确定状态
				顺序，假设已经尽力了ABCDE这5个城市，最终在城市E，那么ABCD顺序重要吗
动态规划常见递推
	一维
		dp[i]=max[dp[j]+payoff(i,j)];
	二维
		sp[(i,j)]-max(ap[(i,j)])+payoff(...)])
	本质
		状态图，有向，无环
			dp[x]=max(ap[x的前去y]+payoff(x,y))
	习题
		lcs
	是什么	
		f(new state)=f(old state)+payoff(decision)
	动态规划与图搜索
		本质就是记忆话搜索
	动态规划与组合数学
	动态规划与枚举
		在状态集合上的枚举
	一般实现
		正向循环
			状态由小到大，求出所有状态的对应值
			慢一些
	将所有的因素都放进状态
